{"version":3,"sources":["redux/constant.js","redux/actions/count.js","containers/Count/index.jsx","containers/Person/index.jsx","redux/actions/person.js","App.jsx","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/count.js","redux/store.js","index.js"],"names":["INCREMENT","DECREMENT","ADD_PERSON","increment","data","type","Count","state","carName","value","selectNumber","props","jia","decrement","jian","incrementIfOdd","count","incrementAsync","jiaAsync","this","personCount","ref","c","onClick","Component","connect","persons","length","time","dispatch","setTimeout","Person","addPerson","name","nameNode","age","ageNode","personObj","id","nanoid","placeholder","map","p","App","initState","combineReducers","preState","action","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.55f472f4.chunk.js","sourcesContent":["/*\r\n    该模块是用于定义action对象中type类型的常量值，目的只有一个：便于管理的同时防止程序员单词写错\r\n*/\r\n\r\nexport const INCREMENT = 'increment'\r\nexport const DECREMENT = 'decrement'\r\nexport const ADD_PERSON = 'add_person'","/*\r\n    该文件专门为Count组件生成action对象\r\n*/\r\nimport { INCREMENT, DECREMENT } from '../constant'\r\n// import store from './store'\r\n\r\n// 同步action，就是指action的值为Object类型的一般对象\r\nexport const increment = data => ({ type: INCREMENT, data })\r\n\r\nexport const decrement = data => ({ type: DECREMENT, data })\r\n\r\n// 所谓的异步action,就是指action的值为函数，异步action中一般都会调用同步action，异步action不是必须要用的。\r\nexport const incrementAsync = (data, time) => {\r\n    // 由于函数是由store调用的，其会传入一个dispatch，所以就不用store.dispatch()的写法，而是可以直接dispatch()\r\n    return (dispatch) => {\r\n        // 此处返回的函数被包裹在组件中的store.dispatch()方法中，所以store会帮忙调用。\r\n        setTimeout(() => {\r\n            // store.dispatch(createIncrementAction(data))\r\n            dispatch(increment(data))\r\n        }, time);\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { increment, decrement, incrementAsync } from '../../redux/actions/count'\r\nimport { connect } from 'react-redux'\r\n\r\n// 定义UI组件\r\nclass Count extends Component {\r\n    state = { carName: '奔驰c63' }\r\n    // 加法\r\n    increment = () => {\r\n        const { value } = this.selectNumber\r\n        this.props.jia(value * 1)\r\n    }\r\n    // 减法\r\n    decrement = () => {\r\n        const { value } = this.selectNumber\r\n        this.props.jian(value * 1)\r\n    }\r\n    // 奇数再加\r\n    incrementIfOdd = () => {\r\n        const { value } = this.selectNumber\r\n        if (this.props.count % 2 !== 0) {\r\n            this.props.jia(value * 1)\r\n        }\r\n    }\r\n    // 异步加\r\n    incrementAsync = () => {\r\n        const { value } = this.selectNumber\r\n        this.props.jiaAsync(value * 1, 500)\r\n    }\r\n    render() {\r\n        // console.log('UI组件接收到的props是：', this.props);\r\n        return (\r\n            <div>\r\n                <h2>我是Count组件,下方组件总人数为:{this.props.personCount}</h2>\r\n                <h4>当前求和为:{this.props.count}</h4>\r\n                <select ref={c => this.selectNumber = c}>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                </select>&nbsp;\r\n                <button onClick={this.increment}>+</button>&nbsp;\r\n                <button onClick={this.decrement}>-</button>&nbsp;\r\n                <button onClick={this.incrementIfOdd}>奇数+</button>&nbsp;\r\n                <button onClick={this.incrementAsync}>异步+</button>&nbsp;\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 使用connect()()创建并暴露一个Count的容器组件\r\nexport default connect(\r\n    // 此处由于reducer为经过合并的对象，不再是原本单纯的值，所以要用state.count进行对象属性获取\r\n    state => ({ count: state.count, personCount: state.persons.length }),\r\n    {\r\n        jia: increment,\r\n        jian: decrement,\r\n        jiaAsync: incrementAsync\r\n    }\r\n)(Count)\r\n\r\n","import React, { Component } from 'react'\r\nimport { nanoid } from 'nanoid'\r\nimport { connect } from 'react-redux'\r\nimport { addPerson } from '../../redux/actions/person'\r\n\r\nclass Person extends Component {\r\n\r\n    addPerson = () => {\r\n        const name = this.nameNode.value\r\n        const age = this.ageNode.value\r\n        const personObj = { id: nanoid(), name, age }\r\n        this.props.addPerson(personObj);\r\n        this.nameNode.value = \"\"\r\n        this.ageNode.value = \"\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>我是Person组件,上方组件求和为{this.props.count}</h2>\r\n                <input ref={c => this.nameNode = c} type=\"text\" placeholder=\"输入名字\" />\r\n                <input ref={c => this.ageNode = c} type=\"text\" placeholder=\"输入年龄\" />\r\n                <button onClick={this.addPerson}>添加</button>\r\n                <ul>\r\n                    {\r\n                        this.props.persons.map((p) => {\r\n                            return <li key={p.id}>名字{p.name}---年龄{p.age}</li>\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    // 此处由于reducer为经过合并的对象，不再是原本单纯的值，所以要用state.persons进行对象属性获取\r\n    state => ({ persons: state.persons, count: state.count }),   // 映射状态\r\n    {\r\n        addPerson\r\n    }\r\n)(Person)","import { ADD_PERSON } from '../constant'\r\n\r\n// 创建增加一个人的action动作对象\r\nexport const addPerson = personObj => ({\r\n    type: ADD_PERSON,\r\n    data: personObj\r\n})","import React, { Component } from 'react'\r\nimport Count from './containers/Count'  // 此处要改成引入containers中的Count容器组件\r\nimport Person from './containers/Person'  // 此处要改成引入containers中的Person容器组件\r\n\r\nexport default class App extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Count />\r\n                <hr />\r\n                <Person />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { ADD_PERSON } from '../constant'\r\n\r\n// 初始化人的列表\r\nconst initState = [{ id: '001', name: 'tom', age: 18 }]\r\nexport default function personReducer(preState = initState, action) {\r\n    const { type, data } = action\r\n    switch (type) {\r\n        case ADD_PERSON:    // 若是添加一个人\r\n            return [data, ...preState]\r\n        default:\r\n            return preState\r\n    }\r\n}","/* \r\n    该文件用于汇总所有的reducer为一个总的reducer\r\n*/\r\n// 引入combineReducers，合并reducer\r\nimport { combineReducers } from 'redux'\r\n// 引入为Count组件服务的reducer\r\nimport count from './count'\r\n// 引入为Person组件服务的reducer\r\nimport person from './person'\r\n\r\n// 汇总所有的reducer变为一个总的reducer\r\nexport default combineReducers({\r\n    count: count,\r\n    persons: person\r\n})","/* \r\n    1.该文件是用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数\r\n    2.reducer函数会接到两个参数，分别是:之前的状态(preState)，动作对象(action)\r\n*/\r\nimport { INCREMENT, DECREMENT } from '../constant'\r\n\r\nconst initState = 0\r\nexport default function countReducer(preState = initState, action) {\r\n    // 从action对象中获取：type、data\r\n    const { type, data } = action\r\n    // 根据type决定如何加工数据\r\n    switch (type) {\r\n        case INCREMENT:   // 如果是加\r\n            return preState + data\r\n        case DECREMENT:   // 如果是减\r\n            return preState - data\r\n        default:\r\n            return preState\r\n    }\r\n}","// 引入applyMiddleware，用于包裹中间件，执行异步任务\r\nimport { createStore, applyMiddleware } from 'redux'\r\n\r\n// 引入汇总之后的reducer\r\nimport reducer from './reducers'\r\n\r\n// 引入redux-thunk，用于支持异步action\r\nimport thunk from 'redux-thunk'\r\n// 引入redux-devtools-extension\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\n// 暴露store\r\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport store from './redux/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(\r\n    /* 此处需要用Provider包裹APP,目的是让App所有的后代容器组件都能接收到store */\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}